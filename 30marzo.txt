que vimos la clase pasada?

lo que hace un qa
se define en el tailoring todo lo que se va a controlar y despues se van implementando controles a lo largo de todo el proceso de la construccion de ese producto.

en realidad definis los controles o que definis en el tailoring?
por esta bien, definis el checklist pero antes de definir un checklist que definis?
el proceso adaptado, se adapta el proceso estandar al proyecto

como seguia el proceso?
se generaba una reunion de tailoring y a partir de eso define el proceso para el proyecto a partir del proceso estandar que se adapta entre el qa y el lider, genero el checklist y despues que pasa?
el qa tiene que definir de alguna manera cual va a ser la planificacion para saber como controlar ese checklist porque si hay un checklist tiene que saber mas que nada cuando controlarlo. en caso de que haya un error levanta un aviso suponiendo que hay un integrante del equipo que no esta cumpliendo con el proceso que se definio, se lo notifica al lider tecnico que seria la persona que esta por encima del equipo de desarrollo. se reporta a la persona que lo tiene que hacer y no lo hizo, pero ademas en paralelo tambien al lider, al gerente. pero a la persona que no esta cumpliendo el proceso tambien hay que avisarle para que cumpla y tambien a su lider.
despues se hacia la reunion retro pos mortem. el objetivo de eso es que como no hay proceso principal que es el proceso de la compania y despues estan los procesos que se adaptan al desarrollo de los distintos proyectos se hace la reunion pos mortem que en realidad se hace cross a todos los proyectos una por cada proyecto para despues buscar coincidencias y ver si hace falta a partir de esas reuniones y modifica al proceso inicial, el generico. 
cual es el objetivo entonces del pos mortem?
el analisis de lo aprendido, ver que fallo, las lecciones aprendidas, que salio bien y que salio mal y ver si hay algo que se pueda capitalizar y actualizo el proceso estandar.

gestion de la configuracion del software o software configuration management
al igual que lo del qa es una actividad de proteccion del proyecto que se ejecuta de principio a fin, en la practica se ejecuta durante todo el proyecto y basicamente sirve para administrar los cambios dentro de un proyecto, por eso se dice que es una actividad de proteccion.
como es el proceso de gestion de la configuracion?
al igual que lo que venimos hablando, deberia existir un proceso estandar u organizacional de gestion de la configuracion y como deberia o como se aplica la gestion de la configuracion dentro de los proyectos.
lo que deberia hacer al igual que esto que hablamos la semana pasada que dentro de la reunion de tailoring adaptar este proceso de la gestion de la configuracion al proyecto. que voy a tener? voy a tener el proceso de gestion de configuracion para el proyecto, que obviamente va a tener atado un plan de gestion de configuracion.

que es un artefacto de software?
cualquier producto que surja del proyecto, puede ser una minuta, diagramas, especificaciones, codigo, etc. suponganse que son productos.
un cambio puede surgir sobre cualquier producto o artefacto, por ejemplo especificacion, en una arquitectura, en un codigo, en casi cualquier artefacto.
lo primero que tengo que determinar es, todos los artefactos que yo voy a generar en ese proyecto, cual de ellos van a estar administrados por la gestion de la configuracion? que artefactos quiero que sean controlados de cambio durante todo el proyecto? una vez que defino que artefactos van a estar controlados por la gestion de la configuracion. va a tener un proceso formal de cambios. podria decir que tengo algun artefacto en particular que defina que no me interese que este administrado por la gestion de la configuracion. que tengo que hacer? decir cuales son los artefactos que van a estar dentro de la gestion de la configuracion y luego van a pasar a llamarse elementos de configuracion de software. los artefactos que yo defino que van a estar controlandose el cambio dentro de la gestion de configuracion son los que comunmente se llaman elementos de configuracion de software (ECS). sobre los que digo que si. se los enumera dentro del plan de la configuracion.

adapte el proceso, voy a empezar a escribir un plan y por ahora lo unico que hice fue identificar que artefactos van a ser elementos de configuracion.

con que deberia empezar el proceso? para que sirve la practica? para que sirve la gestion de la configuracion?
para administrar cambios en un proyecto.
que deberia pasar para comenzar? que deberia pasar primero antes de meter mano en cualquier cosa? tiene que haber un pedido de modificacion o cambio de algun artefacto. sin pedido de vambio no tiene sentido.
entra un pedido de cambio, de ahi hay 2 posibles caminos: tiene linea base o no? si no tiene linea base el cambio se hace de manera informal directamente, porque? porque no esta maduro y se viene trabajando sobre eso. linea base o baseline. a nivel de gestion de configuracion, base line es un momento en el tiempo donde defino que mi artefacti ya esta maduro o terminado, entonces puedo definir una linea base. 
por ejemplo: soy analista funcional y estoy trabajando en un caso de uso. lo estoy desarrollando y todavia no termine entonces no tiene linea base, viene el cliente y me pide cambios sobre lo que estoy escribiendo sobre ese caso de uso y listo, lo cambio.
cuando pasa a tener linea base? cuando yo le digo al cliente, bueno, la verdad que tengo que empezar a trabajar por algo y no puedo pasar toda la vida relevando porque cuanto mas releve, mientras mas se reune con gente mas cambios les hace. se debe acordar con el cliente que se empieza por aca, hagamos una linea base y a partir de esto vemos como seguimos, pero empecemos con esto. deberiamos tener un ok del cliente pero si no responde deberiamos poner una linea base porque sino nunca vamos a tener algo estable para trabajar. antes de llegar a produccion. es un criterio cuando yo decido que esta maduro el artefacto. en la especificacion esta directamente ligada con la aprobacion del cliente. decis empezamos con este caso de uso. pones un criterio, si no contesta en tantos dias empezamos. cuando empezas ya tener un caso de uso o una story para trabajar que le pusiste una linea base, obviamente la vas a poner cuando hayas terminado con esa story o con ese caso de uso. si yo tengo una historia de crear una pantalla de login el cliente me va a dar el ok siendo el developer, la desarrollo y ahi ya seria el baseline? el baseline va sobre los artefactos, cada artefacto tiene un baseline distinto y en ese caso seria la documentacion de como hacer el login el baseline. si sos el desarrollador no ves la documentacion, las lineas de codigo de lo que haga. tu baseline va a ser depende a lo que seas. para un analista funcional no vas a tener el mismo baseline sobre el mismo artefacto o elemento de configuracion que para los demas.
un kick off es cuando empezas un proyecto. esto tiene que ver con si esta lo suficientemente maduro el artefacto como para decir, bueno, estableci una linea base. y esto, por ejemplo: en el caso del desarrollador va a decir, bueno, este codigo esta maduro e implementa el artefacto que me dieron como entrada a mi proceso, que seria la especificacion. si una especificacion no tiene linea base, si yo empiezo a desarrollar me pueden cambiar las cosas todo el tiempo. no deberian pasar los analistas funcionales un requerimiento que no tenga linea base.
tiene linea base o no? no tiene linea base, se hacen los cambios de manera informal. que pasa cuando tiene linea base? va a seguir un proceso formal que es el siguiente: la aprobacion de ese cambio deberia pasar por un comite de control de cambios (change control board). esta integrado por: el management del proyecto, el cliente (el mas importante porque es el que pone la plata). no esta bien aprobar un cambio sin tener el ok del que lo va a pagar o quien va a asumir el costo de un retraso o cambios de planificacion o lo que fuese. un cambio puede implementar muchas cosas. si o si tengo que tener el ok del cliente.
antes de que llegue el cambio al comite lo que deberia pasar es que el analisis de impacto de este cambio. si el cambio viene por un cambio de requerimiento, este puede impactar en codigo, en una arquitectura, caso de prueba o en todas o en algunas. lo que tengo que analizar es el impacto, en que otros elementos de configuracion impacta este cambio y ver el costo que tiene todo esto (esfuerzo, tiempo, etc.)
con toda esta informacion lo que se hace es darsela al comite y el comite es el que decide.
el comite puede tomar dos decisiones: lo aprueba o no lo aprueba. si no lo aprueba es facil, se le comunica a la persona que pide el cambio que el comite no autorizo tu cambio y no se va a hacer. entonces terminaria ahi. 
que pasa si se aprueba el cambio? se coordina la fecha y todos los actores que tienen que estar. ponerse a trabajar. todas las personas involucradas en este cambio deberian empezar a trabajar sobre ese cambio. luego habria que verificar si se implemento bien este cambio. una vez que esta hecho el cambio hay que verificar que este bien hacho.
si estabamos en la version 1.0 y se hace un cambio en la linea base se va a generar una nueva version y todos los elementos afectados por este cambio van a generar una nueva version. cuando se revise y se de el ok se hace el baseline de nuevo de ese artefacto. el baseline es responsabilidad del que vaya a trabajar con el artefacto. el autor del artefacto va a ser el responsable de ponerle baseline. va a saber cuando esta terminado.
le asigno una nueva version al producto y ese es el baseline.
hay que poner un baseline cuando terminas de implementar una historia. cuando el elemento de configuracion que uno hace como autor responde a lo que deberia hacer, ya esta, esta hecho. porque el artefacto sobre le cual estoy trabajando ya tiene una linea base.
el baseline coincide siempre con la terminacion de cualquier historia o depende del metodo que se este desarrollando, pero en metodo agil, la finalizacion de una historia haria que eso ya sea un baseline del artefacto. el input para ponerme a trabajar es la historia.

uno es desarrollador le llega una historia que es el input para ponerme a escribir codigo, cuando termino cumplo con la historia y ahi estoy definiendo el baseline. no tiene que terminar todo el sprint ni nada. el baseline es por elemento de configuracion. siempre el input para el trabajo de uno va a ser el producto de otro por lo general.
para un desarrollador el input es la especificacion, una story o un caso de uso y lo que tiene que tiene que pasar es que uno no tiene que trabajar sobre un producto que no tenga baseline porque a veces es trabajar al pedo. si no tiene baseline los cambios se pueden hacer de manera informal, entonces vos no sabes si eso es lo que se va a implementar o si es lo que realmente quiere el cliente el input de lo que uno hace deberia tener ya linea base.
si el comite aprueba se hacen los cambios, todos los que esten impactados en ese cambio. se hace una nueva linea base sobre cada elemento de configuracion sobre el cual se trabajo. antes de implementar se tiene que comunicar este cambio a las personas impactadas por este cambio. si es un cambio de funcionalidad se tiene que informar a los usuarios y dependiendo el impacto del cambio se tendra que informar a cada uno. no necesariamente los cambios son sobre la funcionalidad. tiene que haber una eventual capacitacion sobre ese cambio para que sepan.
si uno tiene un proceso de gestion de configuracion ordenado deberia informarse a las personas impactadas antes de hacer el cambio en produccion.
se hace un registro de todo esto. que es un registro? quien pidio el cambio, cuando se autorizo, cuando se termino, quien los controlo. todo esto queda registrado por temas de auditoria. 
ejemplo de trazabilidad: como llegar desde un carton de leche a la vaca que lo produjo. como llegar desde una version de codigo a que version de los requerimientos implemento esa porcion de codigo. desde un lado hacia el otro. se puede hacer con herramientas que se integren entre si. si no empiezo a relacionar las herramientas es medio dificil hacer la correspondencia entre versiones de elementos de configuracion. una manera de resolver esto es una matriz de trazabilidad. por cada version del producto tenemos una version de la configuracion. 
esa version de cada elemento de configuracion puede variar o deberia ser la misma? seguramente va a variar porque los cambios no necesariamente impactan, por lo general no impactan en todos esos elementos de configuracion entonces no tenes las mismas versiones para cada elemento de configuracion. un cambio de funcionalidad por lo general no impacta en la arquitectura. la version del diagrama de arquitectura no deberia cambiar. a veces no hay ni que cambiar el codigo. depende el cambio. un cambio generalmente no impacta en todos los elementos de configuracion. una version de producto va a tener distintas versiones de cada elemento de configuracion. un simple cambio de un solo artefacto cambia totalmente la version de producto porque tiene otros elementos de configuracion. pasa a ser una version nueva del sistema porque no es lo mismo, algo cambio.
por lo general lo que se hace es que no se va a cambiar la version por un cambio que no. se trata de agrupar varios cambios para sacar una nueva version. depende del impacto del cambio y la urgencia. si es un cambio menor deberia pasar otra cosa.
es inpracticable que todos los cambios pasen por ese comite. imaginense la cantidad de cambios que hay y si yo tengo que llamar al cliente por cada cambio que tengo que hacer no sirve. que deberia pasar? tengo que tener algun criterio para decir que este tipo de cambio no pasa por el comite, el criterio se define en cada proyecto y tiene que estar bien claro en el plan de gestion de configuracion. cual es el criterio por el cual pasan siempre y cuando tenga una linea base, bajo que circunstancias los cambios van al comite. por ejemplo: si tiene un impacto en el presupuesto de cierto porcentaje o tiene un impacto en la planificacion de cierto porcentaje, si pasa al comite, sino no. si no se pueden pasar todos hay que priorizar de alguna manera pero hay que definir un criterio. este criterio tiene que estar aprobado por el cliente porque si los cambios impactan en tiempo y dinero. hasta cuanto puede hacerse cargo el cliente y no tener su aprobacion. pero tiene que haber un criterio. si afecta a la disponibilidad del producto tiene que ser aprobado por ejemplo.

cualquier empresa que quiera certificar un modelo de calidad tiene que tener todo esto, tiene que tener trazabilidad, gestion de configuracion, control de cambios, un comite, sino no aprueban la certificacion porque eso minimamente tiene que estar. una empresa no puede no tener trazabilidad de sus productos. 
que beneficio tiene todo esto? trata de evitar que al tratar de arreglar problemas se generen problemas nuevos porque si para cada version tengo los elementos de configuracion que estan afectados por esas cosas y se va a corregir un error de una version voy a tener que revisar los demas elementos de configuracion que tengo impacto porque seguramente tambien voy a tener que cambiar algo. si arreglo algo y en esa version tambien tuve un cambio en la base, si no hago esa actualizacion en la base, a pesar de que el codigo este bien cuando quiera grabar datos van a haber errores. hace que trabajes mejor. cuando haya problemas cambia el tiempo de respuesta. hay veces que podemos pasar semanas investigando errores y tratando de solucionarlos. si no hay una relacion entre versiones del producto y sus elementos de configuracion es un lio cuando uno quiere hacer cambios porque no se sabe a demas de lo que hay que cambiar que otras cosas hay que tocar. 45:16 59:20